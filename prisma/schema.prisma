// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @unique @default(cuid())
  username      String?   @unique
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  school        String?
  program       String?
  accounts      Account[]
  sessions      Session[]
  Posts         Post[]
  Comment       Comment[]
  Shares        Shares[]

  @@unique([id, username])
  @@unique([id, username, school])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  user          User?     @relation(fields: [userId, username], references: [id, username], onDelete: Cascade)
  username      String
  post_id       String    @id @default(cuid())
  userId        String?
  title         String
  content       String    @db.Text
  creation_time DateTime  @default(now())
  school        String
  program       String
  comments      Comment[]
  Shares        Shares[]

  @@index([userId, username])
}

model Comment {
  user          User     @relation(fields: [userId, username, school], references: [id, username, school], onDelete: Cascade)
  username      String
  school        String
  comment_id    String   @id @default(cuid())
  userId        String
  comment       String   @db.Text
  creation_time DateTime @default(now())
  Post          Post     @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  post_id       String

  @@index([userId, username, school])
  @@index([post_id])
}

model Shares {
  user       User   @relation(fields: [userId, username, school], references: [id, username, school], onDelete: Cascade)
  username   String
  school     String
  comment_id String @id @default(cuid())
  userId     String
  platform   String
  Post       Post   @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  post_id    String

  @@index([post_id])
  @@index([userId, username, school])
}
